Problem 1: Maximum Manhattan distance between a distinct pair
from N coordinates
#include <bits/stdc++.h>
using namespace std;
void MaxDist(vector<pair<int, int> >& A, int N)
{
	vector<int> V(N), V1(N);
	for (int i = 0; i < N; i++)
{
		V[i] = A[i].first + A[i].second;
		V1[i] = A[i].first - A[i].second;
}
sort(V.begin(), V.end());
sort(V1.begin(), V1.end());
int maximum= max(V.back() - V.front(), V1.back() - V1.front());
cout << maximum << endl;
}
int main()
{
int N = 4;
vector<pair<int, int> > A = { { -1, 2 }, { -4, 6 }, { 3, -4 }, {-2, -4} };
MaxDist(A, N);
return 0;
}


Problem 2: Find the integer points (x, y) with a Manhattan distance
of at least N
#include <bits/stdc++.h>
using namespace std;
vector<pair<int, int> > FindPoints(int n)
{

	vector<pair<int, int> > v;
	v.push_back({ 0, 0 });
	v.push_back({ 0, n });
	v.push_back({ n, 0 });
	v.push_back({ n, n });

	if (n % 2 == 0)
		v.push_back({ n / 2, n / 2 });

return v;
}
int main()
{
int N = 8;
vector<pair<int, int> > v = FindPoints(N);
	for (auto i : v) {
		cout << "(" << i.first << ", "<< i.second << ") ";
	}
	return 0;
}

Problem 3: Sum of Manhattan distances between all pairs of points
#include <bits/stdc++.h>
using namespace std;
int distancesum(int arr[], int n)
{
	sort(arr, arr + n);
int res = 0, sum = 0;
	for (int i = 0; i < n; i++) {
		res += (arr[i] * i - sum);
		sum += arr[i];
	}
return res;
}
int totaldistancesum(int x[], int y[], int n)
{
	return distancesum(x, n) + distancesum(y, n);
}
int main()
{
	int x[] = { -1, 1, 3, 2 };
	int y[] = { 5, 6, 5, 3 };
	int n = sizeof(x) / sizeof(x[0]);
	cout << totaldistancesum(x, y, n) << endl;
	return 0;
}




Count paths with a distance equal to Manhattan’s distance.

#include <bits/stdc++.h>
using namespace std;
#define ll long long int

ll binomialCoeff(int n, int k)
{
	ll res = 1;
	if (k > n - k)
		k = n - k;
	for (int i = 0; i < k; ++i) {
		res *= (n - i);
		res /= (i + 1);
	}

	return res;
}
ll countPaths(int x1, int y1, int x2, int y2)
{
int m = abs(x1 - x2);
int n = abs(y1 - y2);
return (binomialCoeff(m + n, n));
}

int main()
{
	int x1 = 2, y1 = 6, x2 = 4, y2 = 9;
	cout << countPaths(x1, y1, x2, y2);
	return 0;
}




















Pairs with the same Manhattan and Euclidean distance

#include <bits/stdc++.h>
using namespace std;

int findManhattanEuclidPair(pair<int, int> arr[], int n)
{
	map<int, int> X;
	map<int, int> Y;
	map<pair<int, int>, int> XY;

	for (int i = 0; i < n; i++) {
		int xi = arr[i].first;
		int yi = arr[i].second;
		X[xi]++;
		Y[yi]++;
		XY[arr[i]]++;
	}

	int xAns = 0, yAns = 0, xyAns = 0;
	for (auto xCoordinatePair : X) {
		int xFrequency = xCoordinatePair.second;
		int sameXPairs = (xFrequency * (xFrequency - 1)) / 2;
		xAns += sameXPairs;
	}
	for (auto yCoordinatePair : Y) {
		int yFrequency = yCoordinatePair.second;
int sameYPairs = (yFrequency * (yFrequency - 1)) / 2;
		yAns += sameYPairs;
	}
for (auto XYPair : XY) {
		int xyFrequency = XYPair.second;
		int samePointPairs = (xyFrequency * (xyFrequency - 1)) / 2;
		xyAns += samePointPairs;
	}

	return (xAns + yAns - (2 * xyAns));
}
int main()
{
	pair<int, int> arr[] = { { 1, 1 }, { 2, 3 }, { 1, 1 } };
	int n = sizeof(arr) / sizeof(arr[0]);

	cout << findManhattanEuclidPair(arr, n) << endl;
	return 0;
}







Find the number of integral points inside the triangle formed by the three points.

#include<bits/stdc++.h>
using namespace std;
class Point
{
public:
	int x, y;
	Point(int a=0, int b=0):x(a),y(b) {}
};
int gcd(int a, int b)
{
	if (b == 0)
	return a;
	return gcd(b, a%b);
}
int getBoundaryCount(Point p,Point q)
{
	if (p.x==q.x)
		return abs(p.y - q.y) - 1;
	if (p.y == q.y)
		return abs(p.x - q.x) - 1;

	return gcd(abs(p.x-q.x), abs(p.y-q.y)) - 1;
}
int getInternalCount(Point p, Point q, Point r)
{
	int BoundaryPoints = getBoundaryCount(p, q) +
	getBoundaryCount(p, r) +
	getBoundaryCount(q, r) + 3;
	int doubleArea = abs(p.x*(q.y - r.y) + q.x*(r.y - p.y) +r.x*(p.y - q.y));
return (doubleArea - BoundaryPoints + 2)/2;
}

int main()
{
	Point p(0, 0);
	Point q(7, 0);
	Point r(4, 5);
	cout << "Number of integral points inside given triangle is "<< getInternalCount(p, q, r);
	return 0;
}












Find the circumcenter of the triangle formed by the three points.

#include <iostream>
#include <cfloat>
using namespace std;
#define pdd pair<double, double>

void lineFromPoints(pdd P, pdd Q, double &a,double &b, double &c)
{
	a = Q.second - P.second;
	b = P.first - Q.first;
	c = a*(P.first)+ b*(P.second);
}
void perpendicularBisectorFromLine(pdd P, pdd Q,double &a, double &b, double &c)
{
	pdd mid_point = make_pair((P.first + Q.first)/2, (P.second + Q.second)/2);
	c = -b*(mid_point.first) + a*(mid_point.second);
	double temp = a;
	a = -b;
	b = temp;
}
pdd lineLineIntersection(double a1, double b1, double c1,double a2, double b2, double c2)
{
	double determinant = a1*b2 - a2*b1;
	if (determinant == 0)
	{
		return make_pair(FLT_MAX, FLT_MAX);
	}
else
	{
		double x = (b2*c1 - b1*c2)/determinant;
		double y = (a1*c2 - a2*c1)/determinant;
		return make_pair(x, y);
	}
}

void findCircumCenter(pdd P, pdd Q, pdd R)
{
	double a, b, c;
	lineFromPoints(P, Q, a, b, c);
	double e, f, g;
	lineFromPoints(Q, R, e, f, g);
	perpendicularBisectorFromLine(P, Q, a, b, c);
	perpendicularBisectorFromLine(Q, R, e, f, g);
	pdd circumcenter =lineLineIntersection(a, b, c, e, f, g);

	if (circumcenter.first == FLT_MAX && circumcenter.second == FLT_MAX)
	{
		cout << "The two perpendicular bisectors "
				"found come parallel" << endl;
		cout << "Thus, the given points do not form "
				"a triangle and are collinear" << endl;
	}

	else
	{
		cout << "The circumcenter of the triangle PQR is: ";
		cout << "(" << circumcenter.first << ", "
			<< circumcenter.second << ")" << endl;
	}
}

int main()
{
	pdd P = make_pair(1, 1);
	pdd Q = make_pair(0, 0);
	pdd R = make_pair(2, 2);
	findCircumCenter(P, Q, R);
	return 0;
}










































Triangular Matchstick Number

#include <bits/stdc++.h>
using namespace std;

int numberOfSticks(int x)
{
	return (3 * x * (x + 1)) / 2;
}

int main() 
{
	cout<<numberOfSticks(7);
	return 0;
}


Area of Circumcircle of an Equilateral Triangle

#include <stdio.h>
#include <math.h>
int main(){
   int a = 5;
   float area;
   float pie = 3.14;
   printf("Program to calculate area of Circumcircle of an Equilateral Triangle
");
   printf("The side of the triangle is %d 
", a);
   area = ((pie/3)*a*a);
   printf("The area of of Circumcircle of an Equilateral Triangle is %f 
", area);
   return 0;
}


Number of rectangles in the N*M grid

#include <bits/stdc++.h>
using namespace std;

int rectCount(int n, int m)
{
	int count = 0;
	for(int i=1; i<=n; i++) 
	{
		for(int j=1; j<=m; j++) 
		{
			count += (n-i+1)*(m-j+1); 
		}
	}
	return count;
}

int main()
{
	int n = 4, m = 4;
	cout << rectCount(n, m);
	return 0;
}

Total area of two overlapping rectangles

#include <bits/stdc++.h>
using namespace std;

struct Point {
	int x, y;
};

int overlappingArea(Point l1, Point r1, Point l2, Point r2)
{

	int area1 = abs(l1.x - r1.x) * abs(l1.y - r1.y);
	int area2 = abs(l2.x - r2.x) * abs(l2.y - r2.y);
	int x_dist = min(r1.x, r2.x) - max(l1.x, l2.x);
	int y_dist = (min(r1.y, r2.y) - max(l1.y, l2.y));
	int areaI = 0;
	if( x_dist > 0 && y_dist > 0 )
	{
		areaI = x_dist * y_dist;
	}
	return (area1 + area2 - areaI);
}
int main()
{
	Point l1 = { 0, 0 }, r1 = { 5, 5 };
	Point l2 = { 3, 3 }, r2 = { 8, 8 };
	cout << overlappingArea(l1, r1, l2, r2);
	return 0;
}


Number of unique rectangles formed using N unit squares

#include<bits/stdc++.h>
using namespace std;

int countRect(int n)
{
	int ans = 0;
	for (int length = 1; length <= sqrt(n); ++length)
	for (int height = length; height*length <= n; ++height)
		ans++;
	return ans;
}

int main() {
	int n = 6;
	printf("%d", countRect(n));
	return 0;
}

Given a circle of radius r in 2-D with origin or (0, 0) as the center. The task is to find the total lattice points on the circumference

#include<bits/stdc++.h>
using namespace std;

int countLattice(int r)
{
	if (r <= 0)
		return 0; 

	int result = 4;

	for (int x=1; x<r; x++)
	{
		int ySquare = r*r - x*x;
		int y = sqrt(ySquare);
		if (y*y == ySquare)
			result += 4;
	}

	return result;
}

int main()
{
	int r = 5;
	cout << countLattice(r);
	return 0;
}

Pizza cut problem (Or Circle Division by Lines)
 
#include <iostream> 
using namespace std; 

void cutPizza(int n) 
{ 
	cout << (360 % n == 0) ? "1" : "0"; 
	cout << (n <= 360) ? "1" : "0"; 
	cout << (((n * (n + 1)) / 2) <= 360) ? "1" : "0"; 
} 

int main() 
{ 
	int n = 7; 
	cutPizza(n); 

	return 0; 
}












































Compute the parity of a number using XOR and Table Look Up

#include <bits/stdc++.h>
#define P2(n) n, n ^ 1, n ^ 1, n
#define P4(n) P2(n), P2(n ^ 1), P2(n ^ 1), P2(n)
#define P6(n) P4(n), P4(n ^ 1), P4(n ^ 1), P4(n)
#define LOOK_UP P6(0), P6(1), P6(1), P6(0)

unsigned int table[256] = { LOOK_UP };

int Parity(int num)
{
	int max = 16;
while (max >= 8) {
		num = num ^ (num >> max);
		max = max / 2;
	}
	return table[num & 0xff];
}

int main()
{
	unsigned int num = 13;
	bool result = Parity(num);
	result ? std::cout << "Odd Parity" :
			std::cout << "Even Parity";
	return 0;
}


Kernighan’s Algorithm to count set bits in an integer

#include <iostream>
using namespace std;
class gfg {
	public:
	unsigned int countSetBits(int n)
	{
		unsigned int count = 0;
		while (n) {
			n &= (n - 1);
			count++;
		}
		return count;
	}
};

int main()
{
	gfg g;
	int i = 9;
	cout << g.countSetBits(i);
	return 0;
}

Set the K-th bit of a given number

#include <bits/stdc++.h>
using namespace std;

int setKthBit(int n, int k)
{
	return ((1 << k) | n);
}

int main()
{
	int n = 10, k = 2;
	cout << "Kth bit set number = "
		<< setKthBit(n, k);
	return 0;
}


How to unset/clear a bit at n’th position in the number

#include <bits/stdc++.h>
using namespace std;

int clearBit(int n, int k)
{
	return (n & (~(1 << (k - 1))));
}

int main()
{
	int n = 5, k = 1;

	cout<<clearBit(n, k)<<endl;

	return 0;
}


Toggling k-th bit of a number

#include<iostream>
using namespace std;

int toggleKthBit(int n, int k)
{
	return (n ^ (1 << (k-1)));
}

int main()
{
	int n = 5, k = 1;
	cout << toggleKthBit(n , k);
	return 0;
}


 Checking if the bit at nth position is Set or Unset

#include <bits/stdc++.h>
using namespace std;

void isKthBitSet(int n, int k)
{
	if (n & (1 << k))
		cout << "SET";
	else
		cout << "NOT SET";
}

int main()
{
	int n = 5, k = 1;

	// Function call
	isKthBitSet(n, k);
	return 0;
}


Count Set bits in an integer

#include <bits/stdc++.h>
using namespace std;

int countSetBits(int n)
{
	if (n == 0)
		return 0;
	else
		return 1 + countSetBits(n & (n - 1));
}

int main()
{
	int n = 9;
	cout << countSetBits(n);

	return 0;
}


Position of rightmost set bit

#include <iostream>
using namespace std;
#define INT_SIZE 32

int Right_most_setbit(int num)
{
	if (num == 0) // for num==0 there is zero set bit
	{
		return 0;
	}
	else {
		int pos = 1;
		for (int i = 0; i < INT_SIZE; i++) {
			if (!(num & (1 << i)))
				pos++;
			else
				break;
		}
		return pos;
	}
}
int main()
{
	int num = 18;
	int pos = Right_most_setbit(num);
	cout << pos << endl;
	return 0;
}
















Additive Cipher Encryption

#include <iostream>
using namespace std;
 
string encrypt(string text, int s)
{
    string result = "";
 
    for (int i = 0; i < text.length(); i++) {
             if (isupper(text[i]))
            result += char(int(text[i] + s - 65) % 26 + 65);
 
            else
            result += char(int(text[i] + s - 97) % 26 + 97);
    }
 
    return result;
}
 
int main()
{
    string text = "ATTACKATONCE";
    int s = 4;
    cout << "Text : " << text;
    cout << "\nShift: " << s;
    cout << "\nCipher: " << encrypt(text, s);
    return 0;
}



Multiplicative Cipher Encryption and Decryption

#include<bits/stdc++.h>
using namespace std;
int modInverse(int k){
	for(int i=0; i<26; i++){
		int flag= (i*k)%26;
		if(flag==1){
			return i;
		}
	}
	return -1;
}
string encrypt(string plain_text, int key){
	string cipher_text= "";
	for(int i=0; i<plain_text.size(); i++){
		if(isupper(plain_text[i])){
			cipher_text+= char((key* int(plain_text[i]-65))%26 +65);
		}else{
			cipher_text+= char((key* int(plain_text[i]-97))%26 +97);
		}
	}
	return cipher_text;
}
string decrypt(string cipher_text, int key){
	string plain_text= "";
	int key_inverse= modInverse(key);
	if(key_inverse==-1){
		return "Not exist";
	}
	cout<<"Key Inverse: "<<key_inverse<<endl;
	for(int i=0; i<cipher_text.size(); i++){
		if(isupper(cipher_text[i])){
			plain_text+= char((key_inverse* int(cipher_text[i]-65))%26 +65);
		}else{
			plain_text+= char((key_inverse* int(cipher_text[i]-97))%26 +97);
		}
	}
	return plain_text;
}
int main(){
	string plain_text;
	cout<<"Enter plain text: ";
	cin>>plain_text;
	int key;
	cout<<"Enter key: ";
	cin>>key;
	
	cout<<"\nEncryption:\n";
	string cipher_text= encrypt(plain_text, key);
	cout<<"Cipher: "<<cipher_text<<endl;
	
	cout<<"\nDecryption:\n";
	cout<<"Plain Text: "<<decrypt(cipher_text, key)<<endl;
}




Affine Cipher Encryption and Decryption

#include<bits/stdc++.h>
using namespace std;

const int a = 7; 
const int b = 2;

string encryptMessage(string msg)
{
	string cipher = ""; 
	for (int i = 0; i < msg.length(); i++)
	{
		if(msg[i]!=' ') 
			cipher = cipher + (char) ((((a * (msg[i]-'A') ) + b) % 26) + 'A');
		else
			cipher += msg[i];	 
	}
	return cipher;
}

string decryptCipher(string cipher)
{
	string msg = "";
	int a_inv = 0;
	int flag = 0;
	
	for (int i = 0; i < 26; i++)
	{
		flag = (a * i) % 26;
		if (flag == 1)
		{ 
			a_inv = i;
		}
	}
	for (int i = 0; i < cipher.length(); i++)
	{
		if(cipher[i]!=' ')
			msg = msg +(char) (((a_inv * ((cipher[i]+'A' - b)) % 26)) + 'A');
		else
			msg += cipher[i]; 
	}

	return msg;
}

int main(void)
{
	string msg = "HELLO";
	
	string cipherText = encryptMessage(msg);
	cout << "Encrypted Message is : " << cipherText<<endl;
	cout << "Decrypted Message is: " << decryptCipher(cipherText);

	return 0;
}





Playfair Cipher

#include <bits/stdc++.h>
using namespace std;
#define SIZE 30

void toLowerCase(char plain[], int ps)
{
	int i;
	for (i = 0; i < ps; i++) {
		if (plain[i] > 64 && plain[i] < 91)
			plain[i] += 32;
	}
}

int removeSpaces(char* plain, int ps)
{
	int i, count = 0;
	for (i = 0; i < ps; i++)
		if (plain[i] != ' ')
			plain[count++] = plain[i];
	plain[count] = '\0';
	return count;
}

void generateKeyTable(char key[], int ks, char keyT[5][5])
{
	int i, j, k, flag = 0;
	int dicty[26] = { 0 };
	for (i = 0; i < ks; i++) {
		if (key[i] != 'j')
			dicty[key[i] - 97] = 2;
	}

	dicty['j' - 97] = 1;

	i = 0;
	j = 0;

	for (k = 0; k < ks; k++) {
		if (dicty[key[k] - 97] == 2) {
			dicty[key[k] - 97] -= 1;
			keyT[i][j] = key[k];
			j++;
			if (j == 5) {
				i++;
				j = 0;
			}
		}
	}

	for (k = 0; k < 26; k++) {
		if (dicty[k] == 0) {
			keyT[i][j] = (char)(k + 97);
			j++;
			if (j == 5) {
				i++;
				j = 0;
			}
		}
	}
}

void search(char keyT[5][5], char a, char b, int arr[])
{
	int i, j;

	if (a == 'j')
		a = 'i';
	else if (b == 'j')
		b = 'i';

	for (i = 0; i < 5; i++) {

		for (j = 0; j < 5; j++) {

			if (keyT[i][j] == a) {
				arr[0] = i;
				arr[1] = j;
			}
			else if (keyT[i][j] == b) {
				arr[2] = i;
				arr[3] = j;
			}
		}
	}
}

int mod5(int a) { return (a % 5); }
int prepare(char str[], int ptrs)
{
	if (ptrs % 2 != 0) {
		str[ptrs++] = 'z';
		str[ptrs] = '\0';
	}
	return ptrs;
}
void encrypt(char str[], char keyT[5][5], int ps)
{
	int i, a[4];

	for (i = 0; i < ps; i += 2) {

		search(keyT, str[i], str[i + 1], a);

		if (a[0] == a[2]) {
			str[i] = keyT[a[0]][mod5(a[1] + 1)];
			str[i + 1] = keyT[a[0]][mod5(a[3] + 1)];
		}
		else if (a[1] == a[3]) {
			str[i] = keyT[mod5(a[0] + 1)][a[1]];
			str[i + 1] = keyT[mod5(a[2] + 1)][a[1]];
		}
		else {
			str[i] = keyT[a[0]][a[3]];
			str[i + 1] = keyT[a[2]][a[1]];
		}
	}
}

void encryptByPlayfairCipher(char str[], char key[])
{
	char ps, ks, keyT[5][5];

	ks = strlen(key);
	ks = removeSpaces(key, ks);
	toLowerCase(key, ks);

	ps = strlen(str);
	toLowerCase(str, ps);
	ps = removeSpaces(str, ps);

	ps = prepare(str, ps);

	generateKeyTable(key, ks, keyT);

	encrypt(str, keyT, ps);
}

int main()
{
	char str[SIZE], key[SIZE];

	strcpy(key, "Monarchy");
	cout << "Key text: " << key << "\n";

	strcpy(str, "instruments");
	cout << "Plain text: " << str << "\n";

	encryptByPlayfairCipher(str, key);
	cout << "Cipher text: " << str << "\n";
	return 0;
}
Vigenere Cipher

#include<bits/stdc++.h>
using namespace std;

string generateKey(string str, string key)
{
	int x = str.size();

	for (int i = 0; ; i++)
	{
		if (x == i)
			i = 0;
		if (key.size() == str.size())
			break;
		key.push_back(key[i]);
	}
	return key;
}

string cipherText(string str, string key)
{
	string cipher_text;

	for (int i = 0; i < str.size(); i++)
	{
		char x = (str[i] + key[i]) %26;
		x += 'A';

		cipher_text.push_back(x);
	}
	return cipher_text;
}

string originalText(string cipher_text, string key)
{
	string orig_text;

	for (int i = 0 ; i < cipher_text.size(); i++)
	{
		// converting in range 0-25
		char x = (cipher_text[i] - key[i] + 26) %26;

		// convert into alphabets(ASCII)
		x += 'A';
		orig_text.push_back(x);
	}
	return orig_text;
}

// Driver program to test the above function
int main()
{
	string str = "DOGSANDCATSARENICE";
	string keyword = "PET";

	string key = generateKey(str, keyword);
	string cipher_text = cipherText(str, key);

	cout << "Ciphertext : "
		<< cipher_text << "\n";

	cout << "Original/Decrypted Text : "
		<< originalText(cipher_text, key);
	return 0;
}


Hill Cipher

#include <iostream>
using namespace std;

void getKeyMatrix(string key, int keyMatrix[][3])
{
	int k = 0;
	for (int i = 0; i < 3; i++) 
	{
		for (int j = 0; j < 3; j++) 
		{
			keyMatrix[i][j] = (key[k]) % 65;
			k++;
		}
	}
}

void encrypt(int cipherMatrix[][1],
			int keyMatrix[][3], 
			int messageVector[][1])
{
	int x, i, j;
	for (i = 0; i < 3; i++) 
	{
		for (j = 0; j < 1; j++)
		{
			cipherMatrix[i][j] = 0;
		
			for (x = 0; x < 3; x++)
			{
				cipherMatrix[i][j] += 
					keyMatrix[i][x] * messageVector[x][j];
			}
		
			cipherMatrix[i][j] = cipherMatrix[i][j] % 26;
		}
	}
}

void HillCipher(string message, string key)
{
	int keyMatrix[3][3];
	getKeyMatrix(key, keyMatrix);

	int messageVector[3][1];

	for (int i = 0; i < 3; i++)
		messageVector[i][0] = (message[i]) % 65;

	int cipherMatrix[3][1];
	encrypt(cipherMatrix, keyMatrix, messageVector);

	string CipherText;
	for (int i = 0; i < 3; i++)
		CipherText += cipherMatrix[i][0] + 65;
	cout << " Ciphertext:" << CipherText;
}

int main()
{
	string message = "ACT";
	string key = "GYBNQKURP";
	HillCipher(message, key);
	return 0;
}


Transposition Cipher

def encrypt_transposition_cipher(message, key):
    message = message.replace(" ", "").upper()

    num_columns = len(key)

    num_rows = (len(message) + num_columns - 1) // num_columns

    grid = [['' for _ in range(num_columns)] for _ in range(num_rows)]

    message_index = 0
    for row in range(num_rows):
        for col in range(num_columns):
            if message_index < len(message):
                grid[row][col] = message[message_index]
                message_index += 1

    key_order = sorted(range(num_columns), key=lambda x: key[x])
    encrypted_message = ""
    for col in key_order:
        for row in range(num_rows):
            encrypted_message += grid[row][col]

    return encrypted_message

message = "This is a secret message"
key = "GERMAN"

encrypted_message = encrypt_transposition_cipher(message, key)
print( encrypted_message)


Gauss jordan Elimination

def gauss_jordan_elimination(matrix):
    n = len(matrix)
    for i in range(n):
        max_row = i
        for k in range(i + 1, n):
            if abs(matrix[k][i]) > abs(matrix[max_row][i]):
                max_row = k
        matrix[i], matrix[max_row] = matrix[max_row], matrix[i]
        pivot = matrix[i][i]
        for j in range(i, n + 1):
            matrix[i][j] /= pivot
        for k in range(n):
            if k != i:
                factor = matrix[k][i]
                for j in range(i, n + 1):
                    matrix[k][j] -= factor * matrix[i][j]
    solutions = [row[-1] for row in matrix]
    return solutions
matrix = [
    [1, 1, 1, 2],
    [2, 3, 1, 3],
    [1, -1, -2, -6]
]
solutions = gauss_jordan_elimination(matrix)
print("Solutions:")
print("x=",int(solutions[0]),"y=",int(solutions[1]),"z=",int(solutions[2]))
